# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Unity EditMode Suite

on:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  issues: write
  statuses: write

concurrency:
  group: unity-editmode-${{ github.ref }}
  cancel-in-progress: true

env:
  UNITY_VERSION: 6000.2.5f1
  PROJECT_PATH: .
  TEST_PLATFORM: EditMode
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

jobs:
  editmode:
    env:
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
    name: EditMode Regression
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Guard license secret
        if: ${{ env.UNITY_LICENSE == '' }}
        run: |
          echo "::error::UNITY_LICENSE secret is required for EditMode automation." >&2
          exit 1

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-${{ hashFiles('Packages/packages-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-unity-${{ env.UNITY_VERSION }}-

      - name: Run EditMode Tests
        id: run-tests
        continue-on-error: true
        uses: game-ci/unity-test-runner@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          projectPath: ${{ env.PROJECT_PATH }}
          unityVersion: ${{ env.UNITY_VERSION }}
          testMode: ${{ env.TEST_PLATFORM }}
          artifactsPath: Artifacts
          coverageOptions: generateAdditionalMetrics;generateHtmlReport;generateBadgeReport
          customImage: unityci/editor:ubuntu-6000.2.5f1-webgl-3.1
          customParameters: -enableCodeCoverage -coverageResultsPath Artifacts/coverage -coverageHistoryPath Artifacts/coverage-history -assemblyFilters +Soobak.Algo.*

      - name: Publish Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: editmode-suite
          path: Artifacts

      - name: Inspect Artifacts
        if: always()
        shell: pwsh
        run: |
          if (Test-Path Artifacts) {
            Get-ChildItem -Recurse Artifacts | ForEach-Object { Write-Host $_.FullName }
          } else {
            Write-Warning 'Artifacts directory not found.'
          }

      - name: Surface Test Results
        if: always()
        shell: pwsh
        run: |
          $resultFile = Get-ChildItem -Path Artifacts -Recurse -Filter editmode-results.xml -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($resultFile) {
            [xml]$report = Get-Content $resultFile.FullName
            $node = $report.'test-run'
            if ($node) {
              $attrs = $node.Attributes
              $total = $attrs['total'].Value
              $passed = $attrs['passed'].Value
              $failed = $attrs['failed'].Value
              $skipped = $attrs['skipped'].Value
              Write-Host "::notice::Tests Total=$total Passed=$passed Failed=$failed Skipped=$skipped"
            } else {
              Write-Host "::notice::editmode-results.xml located at $($resultFile.FullName)"
            }
          } else {
            Write-Warning 'editmode-results.xml not generated.'
          }

      - name: Fail on Test Failure
        if: ${{ steps.run-tests.outcome == 'failure' }}
        run: |
          echo "Unity EditMode tests failed." >&2
          exit 1
